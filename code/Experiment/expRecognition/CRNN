{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"af0cd7defc4f47249b9d9b97d2933347":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_65ee61a3ba034904ab812f48273bd1e2","IPY_MODEL_432cb24c02da47e5a847c8dbc25fc7d9","IPY_MODEL_855f982555aa4bda96838bacf9570886"],"layout":"IPY_MODEL_98d73688d3ef46ed9dfccacd58ad8f0f"}},"65ee61a3ba034904ab812f48273bd1e2":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_922f19b7b1fe4ba7951217473f8b936d","placeholder":"​","style":"IPY_MODEL_13399ab46a2b4b3b8113f60fc1ed93d5","value":"100%"}},"432cb24c02da47e5a847c8dbc25fc7d9":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_8102641c5278434ca8292538882d72c7","max":2507,"min":0,"orientation":"horizontal","style":"IPY_MODEL_4198613730404f1bb48c024132b3eebf","value":2507}},"855f982555aa4bda96838bacf9570886":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ce0feb06c232435a92f5f3e360c31593","placeholder":"​","style":"IPY_MODEL_84efb08425e14061bb2bf5f268a5b7d2","value":" 2507/2507 [00:00&lt;00:00, 5247.71it/s]"}},"98d73688d3ef46ed9dfccacd58ad8f0f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"922f19b7b1fe4ba7951217473f8b936d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"13399ab46a2b4b3b8113f60fc1ed93d5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"8102641c5278434ca8292538882d72c7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4198613730404f1bb48c024132b3eebf":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"ce0feb06c232435a92f5f3e360c31593":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"84efb08425e14061bb2bf5f268a5b7d2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"15e9a5c044034eef815cee9d33df85d9":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_165d937b4e14488099b7cfc2da018b9a","IPY_MODEL_d9ebe021347147279d51ec242d168500","IPY_MODEL_b75f223fee0042aa8b4bf832dd629340"],"layout":"IPY_MODEL_f2e63abeea0b4e40a8018936219a997f"}},"165d937b4e14488099b7cfc2da018b9a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_525fdce73f9348819b9484b7bd8811b8","placeholder":"​","style":"IPY_MODEL_aef337b8ee764b96af632c645a5984e4","value":"  0%"}},"d9ebe021347147279d51ec242d168500":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"danger","description":"","description_tooltip":null,"layout":"IPY_MODEL_375c9de3866a41bbbf1b306ede060112","max":2507,"min":0,"orientation":"horizontal","style":"IPY_MODEL_ce310589dd5e48cca82b0fa999cfa243","value":0}},"b75f223fee0042aa8b4bf832dd629340":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_fe5307df27cf4ff392f1b239de34dde8","placeholder":"​","style":"IPY_MODEL_560d1e9554134af797fef8ce1d1a0778","value":" 0/2507 [00:00&lt;?, ?it/s]"}},"f2e63abeea0b4e40a8018936219a997f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"525fdce73f9348819b9484b7bd8811b8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"aef337b8ee764b96af632c645a5984e4":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"375c9de3866a41bbbf1b306ede060112":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ce310589dd5e48cca82b0fa999cfa243":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"fe5307df27cf4ff392f1b239de34dde8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"560d1e9554134af797fef8ce1d1a0778":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":423,"metadata":{"id":"Yj3BF9zcCVC_","executionInfo":{"status":"ok","timestamp":1686417237972,"user_tz":-420,"elapsed":385,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"outputs":[],"source":["import cv2\n","import json\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import random\n","import shutil\n","\n","\n","from glob import glob\n","from tqdm import tqdm"]},{"cell_type":"markdown","source":["**Mounted Drive**"],"metadata":{"id":"gbYv64H_Ca6C"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9pDWaOSfCYeM","executionInfo":{"status":"ok","timestamp":1686408499073,"user_tz":-420,"elapsed":24606,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"69cb9fb6-7bbe-4f4b-c795-57bf4545f02f"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["!unzip /content/drive/MyDrive/miniProject/benetech-making-graphs-accessible.zip -d dataset"],"metadata":{"id":"CkpYH8C3Cd3t"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Import Lib**"],"metadata":{"id":"MS1YWQpZEOVA"}},{"cell_type":"code","source":["import torch\n","from IPython.display import Image  # for displaying images\n","import os \n","import random\n","import shutil\n","from sklearn.model_selection import train_test_split\n","import xml.etree.ElementTree as ET\n","from xml.dom import minidom\n","from tqdm import tqdm\n","from PIL import Image, ImageDraw\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","random.seed(108)"],"metadata":{"id":"qEFBZCB7DETl","executionInfo":{"status":"ok","timestamp":1686408556773,"user_tz":-420,"elapsed":4939,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["def extract_label_bbox(data, rows, img_id,image = \"None\"):\n","    common = []\n","    if data[\"chart-type\"] != 'scatter':\n","      return None\n","    common+= [img_id, data[\"source\"], data[\"chart-type\"]]\n","    # TRAIN_FOLDER = \"/content/dataset/train/images/\"\n","    # image = cv2.imread(TRAIN_FOLDER + img_id + \".jpg\")\n","    image_w,image_h,c = image.shape\n","    # print(image_w,image_h)\n","    for box in data[\"text\"]:\n","        # x0 = box[\"polygon\"][\"x0\"]\n","        # y0 = box[\"polygon\"][\"y1\"]\n","        # w = abs(box[\"polygon\"][\"x1\"] - box[\"polygon\"][\"x0\"]) + abs(box[\"polygon\"][\"x2\"] - box[\"polygon\"][\"x1\"])\n","        # h = abs(box[\"polygon\"][\"y3\"] - box[\"polygon\"][\"y1\"])\n","        # x0 = box[\"polygon\"][\"x0\"]\n","        # y0 = box[\"polygon\"][\"y0\"]\n","        # w = box[\"polygon\"][\"x1\"] - box[\"polygon\"][\"x0\"]\n","        # h = box[\"polygon\"][\"y3\"] - box[\"polygon\"][\"y0\"]\n","        # print(box[\"polygon\"][\"x2\"],box[\"polygon\"][\"x0\"],box[\"polygon\"][\"y2\"],box[\"polygon\"][\"y0\"])\n","        label = box[\"role\"]\n","        if label != \"tick_label\":\n","          continue\n","        x0 = (box[\"polygon\"][\"x0\"] + box[\"polygon\"][\"x2\"])/2\n","        y0 = (box[\"polygon\"][\"y0\"] + box[\"polygon\"][\"y2\"])/2\n","        w = box[\"polygon\"][\"x2\"] - box[\"polygon\"][\"x0\"]\n","        h = box[\"polygon\"][\"y3\"] - box[\"polygon\"][\"y0\"]\n","        x0 = x0/image_h\n","        y0 = y0/image_w\n","        w = w/image_h\n","        h = h/image_w\n","\n","        text = box[\"text\"]\n","        # print(label)\n","        box_row = common + [x0, y0, w, h, label,text]\n","        rows.append(box_row)\n","    return rows"],"metadata":{"id":"9BBL4T5JEVuu","executionInfo":{"status":"ok","timestamp":1686417451216,"user_tz":-420,"elapsed":546,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":428,"outputs":[]},{"cell_type":"code","source":["ANNOTATION = \"/content/dataset/train/annotations/*.json\"\n","TRAIN_FOLDER = \"/content/dataset/train/images/\"\n","rows = []\n","for file_name in tqdm(glob(ANNOTATION)):\n","    label_bbox = []\n","    tick_bbox = []\n","    with open(file_name) as f:\n","        data = json.load(f)\n","        img_id = file_name.split(\"/\")[-1].split(\".\")[0]\n","        image = cv2.imread(TRAIN_FOLDER + img_id + \".jpg\")\n","        label_bbox = extract_label_bbox(data, label_bbox, img_id,image)\n","        if label_bbox == None:\n","           continue\n","        data_rows = label_bbox\n","    rows += data_rows\n","    # break"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C6mZ_T9XEw5k","executionInfo":{"status":"ok","timestamp":1686417589142,"user_tz":-420,"elapsed":130588,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"bfd9f48d-3203-4c8a-a15c-d815fb225dad"},"execution_count":429,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 60578/60578 [02:10<00:00, 465.59it/s]\n"]}]},{"cell_type":"code","source":["df = pd.DataFrame(rows)\n","df.columns = [\"image_id\", \"source\", \"chart\", \"x0\", \"y0\", \"w\", \"h\", \"label\",\"text\"]\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"iEcyPV6bFA9k","executionInfo":{"status":"ok","timestamp":1686417593420,"user_tz":-420,"elapsed":608,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"c91421c4-b483-4a0f-f8e1-7b569b41ff46"},"execution_count":430,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       image_id     source    chart        x0        y0         w         h  \\\n","0  a78edf66d27c  generated  scatter  0.114087  0.891429  0.053571  0.028571   \n","1  a78edf66d27c  generated  scatter  0.250992  0.891429  0.053571  0.028571   \n","2  a78edf66d27c  generated  scatter  0.387897  0.891429  0.053571  0.028571   \n","3  a78edf66d27c  generated  scatter  0.523810  0.891429  0.059524  0.028571   \n","4  a78edf66d27c  generated  scatter  0.661706  0.891429  0.057540  0.028571   \n","\n","        label  text  \n","0  tick_label  1940  \n","1  tick_label  1960  \n","2  tick_label  1980  \n","3  tick_label  2000  \n","4  tick_label  2020  "],"text/html":["\n","  <div id=\"df-637bbd95-3b29-409c-995d-07d71efd4178\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image_id</th>\n","      <th>source</th>\n","      <th>chart</th>\n","      <th>x0</th>\n","      <th>y0</th>\n","      <th>w</th>\n","      <th>h</th>\n","      <th>label</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>a78edf66d27c</td>\n","      <td>generated</td>\n","      <td>scatter</td>\n","      <td>0.114087</td>\n","      <td>0.891429</td>\n","      <td>0.053571</td>\n","      <td>0.028571</td>\n","      <td>tick_label</td>\n","      <td>1940</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>a78edf66d27c</td>\n","      <td>generated</td>\n","      <td>scatter</td>\n","      <td>0.250992</td>\n","      <td>0.891429</td>\n","      <td>0.053571</td>\n","      <td>0.028571</td>\n","      <td>tick_label</td>\n","      <td>1960</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>a78edf66d27c</td>\n","      <td>generated</td>\n","      <td>scatter</td>\n","      <td>0.387897</td>\n","      <td>0.891429</td>\n","      <td>0.053571</td>\n","      <td>0.028571</td>\n","      <td>tick_label</td>\n","      <td>1980</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>a78edf66d27c</td>\n","      <td>generated</td>\n","      <td>scatter</td>\n","      <td>0.523810</td>\n","      <td>0.891429</td>\n","      <td>0.059524</td>\n","      <td>0.028571</td>\n","      <td>tick_label</td>\n","      <td>2000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>a78edf66d27c</td>\n","      <td>generated</td>\n","      <td>scatter</td>\n","      <td>0.661706</td>\n","      <td>0.891429</td>\n","      <td>0.057540</td>\n","      <td>0.028571</td>\n","      <td>tick_label</td>\n","      <td>2020</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-637bbd95-3b29-409c-995d-07d71efd4178')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-637bbd95-3b29-409c-995d-07d71efd4178 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-637bbd95-3b29-409c-995d-07d71efd4178');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":430}]},{"cell_type":"code","source":["len(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2hpf64k0NK4j","executionInfo":{"status":"ok","timestamp":1686417599323,"user_tz":-420,"elapsed":370,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"b05da317-602d-4e5d-b27f-f9de0bba8be6"},"execution_count":431,"outputs":[{"output_type":"execute_result","data":{"text/plain":["689236"]},"metadata":{},"execution_count":431}]},{"cell_type":"code","source":["def get_stoi(df):\n","    \"\"\"Get String to Index dictionary\"\"\"\n","    stoi = {}\n","    for idx, string in enumerate(df.label.unique()):\n","        stoi[string] = idx\n","    itos = {item[1]: item[0] for item in stoi.items()}\n","    df = df.replace({\"label\": stoi})\n","    return stoi\n","\n","stoi = get_stoi(df)\n","print(stoi)\n","NUM_CLASSES =  len(stoi)\n","df = df[df[\"label\"].isin(list(stoi.keys()))]\n","df = df.replace({\"label\": stoi})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"10i2oBD2FC3t","executionInfo":{"status":"ok","timestamp":1686417605782,"user_tz":-420,"elapsed":3407,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"5e590e3e-278d-4e74-d091-1e6e894275fd"},"execution_count":432,"outputs":[{"output_type":"stream","name":"stdout","text":["{'tick_label': 0}\n"]}]},{"cell_type":"code","source":["def get_new_annotation(df):\n","    for tup in df.groupby(\"image_id\"):\n","        name = tup[0]\n","        x = []\n","        y = []\n","        w = []\n","        h = []\n","        label = []\n","        for ele in tup:\n","          try:\n","            x = ele['x0'].to_list()\n","            y = ele['y0'].to_list()\n","            w = ele['w'].to_list()\n","            h = ele['h'].to_list()\n","            label = ele['label'].to_list()\n","            text = ele['text'].to_list()\n","          except:\n","            continue\n","        with open('new_annotation/{}.txt'.format(name),'a') as f:\n","            for i in range(len(x)):\n","                f.write(\"{} {} {} {} {}###{}\\n\".format(label[i],x[i],y[i],w[i],h[i],text[i]))"],"metadata":{"id":"QMKHA1inFKf_","executionInfo":{"status":"ok","timestamp":1686417607892,"user_tz":-420,"elapsed":2,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":433,"outputs":[]},{"cell_type":"code","source":["!rm -r new_annotation\n","!mkdir new_annotation\n","get_new_annotation(df)"],"metadata":{"id":"Rrn1FJsnFK6l","executionInfo":{"status":"ok","timestamp":1686417625053,"user_tz":-420,"elapsed":13486,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":434,"outputs":[]},{"cell_type":"code","source":["annotations = [os.path.join('new_annotation', x) for x in os.listdir('new_annotation') if x[-3:] == \"txt\"]"],"metadata":{"id":"05LoSGqgFMgs","executionInfo":{"status":"ok","timestamp":1686417631483,"user_tz":-420,"elapsed":2,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":435,"outputs":[]},{"cell_type":"code","source":["!rm -r dataCRNN\n","!mkdir dataCRNN"],"metadata":{"id":"rdR_6HhsRt-5","executionInfo":{"status":"ok","timestamp":1686417636927,"user_tz":-420,"elapsed":674,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":436,"outputs":[]},{"cell_type":"code","source":["from google.colab.patches import cv2_imshow"],"metadata":{"id":"Yqdw7s5ZTMMW","executionInfo":{"status":"ok","timestamp":1686415872942,"user_tz":-420,"elapsed":2,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":323,"outputs":[]},{"cell_type":"code","source":["# annotations = '/content/new_annotation/*'\n","import matplotlib.patches as patches\n","class_id_to_name_mapping = {v : k for k,v in stoi.items()}\n","# print(itos)\n","# fig, ax = plt.subplots()\n","# plt.rcParams[\"figure.figsize\"] = (20,15)\n","def plot_bounding_box(image, annotation_list,text_util):\n","    annotations = np.array(annotation_list)\n","    w, h = image.size\n","    # print(image.size)\n","    \n","    plotted_image = ImageDraw.Draw(image)\n","\n","    transformed_annotations = np.copy(annotations)\n","    text_annotations = np.copy(text_util)\n","    # print(transformed_annotations)\n","    # print(transformed_annotations)\n","    transformed_annotations[:,[1,3]] = annotations[:,[1,3]] * w\n","    transformed_annotations[:,[2,4]] = annotations[:,[2,4]] * h \n","    \n","    transformed_annotations[:,1] = transformed_annotations[:,1] - (transformed_annotations[:,3] / 2)\n","    transformed_annotations[:,2] = transformed_annotations[:,2] - (transformed_annotations[:,4] / 2)\n","    transformed_annotations[:,3] = transformed_annotations[:,1] + transformed_annotations[:,3]\n","    transformed_annotations[:,4] = transformed_annotations[:,2] + transformed_annotations[:,4]\n","    \n","    for ann,text in zip(transformed_annotations,text_util):\n","        # obj_cls, x0, y0, w, h = int(ann[0]),int(ann[1]),int(ann[2]),int(ann[3]),int(ann[4])\n","        obj_cls, x0, y0, x1, y1 = ann\n","        # print(x0,y0,x1,y1)\n","        image_patch = np.array(image)[int(y0):int(y1),int(x0):int(x1)]\n","        # print(class_id_to_name_mapping[(int(obj_cls))])\n","        if class_id_to_name_mapping[(int(obj_cls))] == \"axis_title\":\n","          w = x1 - x0\n","          h = y1 - y0\n","          if w < h:\n","            rotated_img = cv2.rotate(image_patch, cv2.ROTATE_90_CLOCKWISE)\n","            # plt.imshow(rotated_img)\n","            # plt.show()\n","            cv2.imwrite(os.path.join('/content/dataCRNN/', f'{text}.jpg'),  rotated_img)\n","          else:\n","            # plt.imshow(image_patch)\n","            # plt.show()\n","            cv2.imwrite(os.path.join('/content/dataCRNN/', f'{text}.jpg'), image_patch)\n","        # plotted_image.rectangle(((x0,y0), (x1,y1)),outline = \"black\")\n","        else:\n","\n","            cv2.imwrite(os.path.join('/content/dataCRNN/', f'{text}.jpg'), image_patch)\n","            # plt.imshow(image_patch)\n","            # print(text,image_patch.shape)\n","            # plt.show()\n","        # plotted_image.point((x0,y0),fill='black')\n","\n","        # plotted_image.text((x0, y0 + 10), class_id_to_name_mapping[(int(obj_cls))], (128, 255, 128))\n","        # print( class_id_to_name_mapping[(int(obj_cls))])\n","    \n","    # plt.imshow(np.array(image))\n","    # plt.show()\n","\n","# Get any random annotation file \n","for annotation_file in tqdm(annotations):\n","    try:\n","    # annotation_file = random.choice(annotations)\n","      with open(annotation_file, \"r\") as file:\n","          annotation_list = file.read().split(\"\\n\")[:-1]\n","          annotation_list = [x.split(\"###\") for x in annotation_list]\n","          # print(annotation_list)\n","          annotation_util = [ele[0] for ele in annotation_list]\n","          text_util = [ele[1] for ele in annotation_list]\n","          annotation_util = [[float(y) for y in x.split(' ')] for x in annotation_util]\n","          # annotation_list = [ele + [ele2] for ele,ele2 in zip(annotation_util,text_util)]\n","          # print(annotation_list)\n","          \n","      # print(annotation_list)\n","      #Get the corresponding image file\n","      # print(annotation_file)\n","      image_file = annotation_file.replace(\"new_annotation\", \"dataset/train/images\").replace(\"txt\", \"jpg\")\n","      assert os.path.exists(image_file)\n","\n","      #Load the image\n","      image = Image.open(image_file)\n","\n","      #Plot the Bounding Box\n","      plot_bounding_box(image, annotation_util,text_util)\n","    except Exception as e:\n","      # print(image_file)\n","      # print(\"An error occurred:\", e)\n","      continue"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":373},"id":"bpjnNZcoFN0g","executionInfo":{"status":"error","timestamp":1686417673602,"user_tz":-420,"elapsed":32445,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"d446f897-f9fa-4a8b-d27d-d37b10189fbb"},"execution_count":437,"outputs":[{"output_type":"stream","name":"stderr","text":["  5%|▌         | 1974/36179 [00:32<09:20, 61.05it/s]\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-437-01d295f0ebc2>\u001b[0m in \u001b[0;36m<cell line: 60>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m       \u001b[0;31m#Plot the Bounding Box\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 83\u001b[0;31m       \u001b[0mplot_bounding_box\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mannotation_util\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtext_util\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m       \u001b[0;31m# print(image_file)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-437-01d295f0ebc2>\u001b[0m in \u001b[0;36mplot_bounding_box\u001b[0;34m(image, annotation_list, text_util)\u001b[0m\n\u001b[1;32m     45\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m             \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/dataCRNN/'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf'{text}.jpg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimage_patch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     48\u001b[0m             \u001b[0;31m# plt.imshow(image_patch)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m             \u001b[0;31m# print(text,image_patch.shape)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["**Model Training**"],"metadata":{"id":"82ra90KaXpd6"}},{"cell_type":"code","source":["def seed_everything(seed):\n","    random.seed(seed)\n","    os.environ['PYTHONHASHSEED'] = str(seed)\n","    np.random.seed(seed)\n","    torch.manual_seed(seed)\n","    torch.cuda.manual_seed(seed)\n","    torch.backends.cudnn.deterministic = True\n","    torch.backends.cudnn.benchmark = True\n","\n","seed_everything(712)"],"metadata":{"id":"_sMKF6GnTQZg","executionInfo":{"status":"ok","timestamp":1686416925236,"user_tz":-420,"elapsed":1,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":380,"outputs":[]},{"cell_type":"code","source":["import os\n","import glob\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import albumentations as A\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader\n","from torchvision import transforms\n","from torchvision.models import resnet18\n","\n","import string\n","from tqdm.notebook import tqdm\n","import cv2\n","from PIL import Image\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","import multiprocessing as mp\n","import glob\n","import os \n","import string\n","from pathlib import Path\n","\n","from PIL import Image\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.utils.data import DataLoader, Dataset\n","from torchvision import transforms\n","from torchvision.models import resnet18\n","import matplotlib.pyplot as plt\n","import collections\n","\n","from IPython.display import clear_output\n","%matplotlib inline\n","plt.style.use('seaborn')"],"metadata":{"id":"O6x1Z6MIXrhb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686416927201,"user_tz":-420,"elapsed":5,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"d5c544be-1c9c-486d-fe48-3be9605691e9"},"execution_count":381,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-381-81c56c00e579>:41: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.\n","  plt.style.use('seaborn')\n"]}]},{"cell_type":"code","source":["data_path = \"/content/dataCRNN\""],"metadata":{"id":"ptrobU-iXxWM","executionInfo":{"status":"ok","timestamp":1686416932891,"user_tz":-420,"elapsed":1,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":382,"outputs":[]},{"cell_type":"code","source":["image_fns = os.listdir(data_path)\n","print(len(image_fns))\n","print(np.unique([len(\".\".join(image_fn.split(\".\")[:-1])) for image_fn in image_fns]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zHEEI6FDYHKq","executionInfo":{"status":"ok","timestamp":1686416936916,"user_tz":-420,"elapsed":4,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"cf1febd6-2263-4be3-adaa-d0635f53d1ca"},"execution_count":383,"outputs":[{"output_type":"stream","name":"stdout","text":["2507\n","[1 2 3 4 5 6 7 8 9]\n"]}]},{"cell_type":"code","source":["image_fns"],"metadata":{"id":"u88qVpx0REK4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["image_fns_train, image_fns_val = train_test_split(image_fns, random_state=0,test_size = 0.1)\n","image_fns_val, image_fns_test = train_test_split(image_fns_val, random_state=0,test_size = 0.5)\n","print(len(image_fns_train),len(image_fns_val),len(image_fns_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9J3Pdt4zYN2J","executionInfo":{"status":"ok","timestamp":1686416955472,"user_tz":-420,"elapsed":4,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"b56cfb3e-3102-4c1b-daec-e1edb069a588"},"execution_count":385,"outputs":[{"output_type":"stream","name":"stdout","text":["2256 125 126\n"]}]},{"cell_type":"code","source":["image_ns = [\".\".join(image_fn.split(\".\")[:-1]) for image_fn in image_fns]"],"metadata":{"id":"w90hYiDcQ0CH","executionInfo":{"status":"ok","timestamp":1686416974695,"user_tz":-420,"elapsed":554,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":386,"outputs":[]},{"cell_type":"markdown","source":["**Define character maps**"],"metadata":{"id":"VWTzEWTrY_NR"}},{"cell_type":"code","source":["image_ns = [\".\".join(image_fn.split(\".\")[:-1]) for image_fn in image_fns]\n","image_ns = \"\".join(image_ns)\n","letters = sorted(list(set(list(image_ns))))\n","print(len(letters))\n","print(letters)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y4sk3jPpYzlD","executionInfo":{"status":"ok","timestamp":1686416978457,"user_tz":-420,"elapsed":4,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"1d9fdfa6-b3a5-4eb4-92e5-d9208bf53ffd"},"execution_count":387,"outputs":[{"output_type":"stream","name":"stdout","text":["18\n","[' ', '$', '%', '+', ',', '-', '.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'E']\n"]}]},{"cell_type":"code","source":["vocabulary = [\"#\"] + letters\n","print(len(vocabulary))\n","print(vocabulary)\n","idx2char = {k:v for k,v in enumerate(vocabulary, start=0)}\n","print(idx2char)\n","char2idx = {v:k for k,v in idx2char.items()}\n","print(char2idx)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0csO2uOEZFbz","executionInfo":{"status":"ok","timestamp":1686416987646,"user_tz":-420,"elapsed":6,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"3364159b-f050-478a-9a93-a0d7df7e47bc"},"execution_count":389,"outputs":[{"output_type":"stream","name":"stdout","text":["19\n","['#', ' ', '$', '%', '+', ',', '-', '.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'E']\n","{0: '#', 1: ' ', 2: '$', 3: '%', 4: '+', 5: ',', 6: '-', 7: '.', 8: '0', 9: '1', 10: '2', 11: '3', 12: '4', 13: '5', 14: '6', 15: '7', 16: '8', 17: '9', 18: 'E'}\n","{'#': 0, ' ': 1, '$': 2, '%': 3, '+': 4, ',': 5, '-': 6, '.': 7, '0': 8, '1': 9, '2': 10, '3': 11, '4': 12, '5': 13, '6': 14, '7': 15, '8': 16, '9': 17, 'E': 18}\n"]}]},{"cell_type":"code","source":["height_mean = 0\n","width_mean = 0\n","for img in tqdm(image_fns):\n","  height,width,c = np.array(Image.open(data_path + '/' + img)).shape\n","  height_mean += height\n","  width_mean += width\n","\n","height_mean = height_mean // len(image_fns)\n","width_mean = width_mean // len(image_fns)\n","print(height_mean,width_mean)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":66,"referenced_widgets":["af0cd7defc4f47249b9d9b97d2933347","65ee61a3ba034904ab812f48273bd1e2","432cb24c02da47e5a847c8dbc25fc7d9","855f982555aa4bda96838bacf9570886","98d73688d3ef46ed9dfccacd58ad8f0f","922f19b7b1fe4ba7951217473f8b936d","13399ab46a2b4b3b8113f60fc1ed93d5","8102641c5278434ca8292538882d72c7","4198613730404f1bb48c024132b3eebf","ce0feb06c232435a92f5f3e360c31593","84efb08425e14061bb2bf5f268a5b7d2"]},"id":"YOe3sCJGbxfF","executionInfo":{"status":"ok","timestamp":1686417000605,"user_tz":-420,"elapsed":777,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"7f3466bb-374b-4790-f7c6-88c3b780ad36"},"execution_count":391,"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/2507 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"af0cd7defc4f47249b9d9b97d2933347"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["11 32\n"]}]},{"cell_type":"code","source":["\n","for img in tqdm(image_fns):\n","  height,width,c = np.array(Image.open(data_path + '/' + img).convert('RGB')).shape\n","  print(height,width,c)\n","  break"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":66,"referenced_widgets":["15e9a5c044034eef815cee9d33df85d9","165d937b4e14488099b7cfc2da018b9a","d9ebe021347147279d51ec242d168500","b75f223fee0042aa8b4bf832dd629340","f2e63abeea0b4e40a8018936219a997f","525fdce73f9348819b9484b7bd8811b8","aef337b8ee764b96af632c645a5984e4","375c9de3866a41bbbf1b306ede060112","ce310589dd5e48cca82b0fa999cfa243","fe5307df27cf4ff392f1b239de34dde8","560d1e9554134af797fef8ce1d1a0778"]},"id":"DNbeOV5YdRi9","executionInfo":{"status":"ok","timestamp":1686416532784,"user_tz":-420,"elapsed":438,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"33074dcb-62bc-456a-f2fb-da42c3c2c541"},"execution_count":354,"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/2507 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"15e9a5c044034eef815cee9d33df85d9"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["12 25 3\n"]}]},{"cell_type":"code","source":["image_fns_train = ['dataCRNN/'+ ele for ele in image_fns_train]\n","image_fns_val = ['dataCRNN/'+ ele for ele in image_fns_val]\n","image_fns_test = ['dataCRNN/'+ ele for ele in image_fns_test]"],"metadata":{"id":"59H-4Rt4DlIs","executionInfo":{"status":"ok","timestamp":1686417006158,"user_tz":-420,"elapsed":380,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":392,"outputs":[]},{"cell_type":"code","source":["!rm -r img2text\n","!mkdir img2text\n","!mkdir img2text/train\n","!mkdir img2text/val\n","!mkdir img2text/test\n","\n","def move_files_to_folder(list_of_files, destination_folder):\n","    for f in list_of_files:\n","        try:\n","            shutil.move(f, destination_folder)\n","        except:\n","            print(f)\n","            assert False\n","\n","move_files_to_folder(image_fns_train, 'img2text/train')\n","move_files_to_folder(image_fns_val, 'img2text/val')\n","move_files_to_folder(image_fns_test, 'img2text/test')"],"metadata":{"id":"ua4d61on_x-_","executionInfo":{"status":"ok","timestamp":1686417011265,"user_tz":-420,"elapsed":1246,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":393,"outputs":[]},{"cell_type":"markdown","source":["**Define DataLoader**"],"metadata":{"id":"r4CKVBJ_ZMHy"}},{"cell_type":"code","source":["class TEXTDataset(Dataset):\n","    \n","    def __init__(self, data_dir):\n","        pathes = os.listdir(data_dir)\n","        abspath = os.path.abspath(data_dir)\n","        self.data_dir = data_dir\n","        self.pathes = [os.path.join(abspath, path) for path in pathes]\n","        \n","    def __len__(self):\n","        return len(self.pathes)\n","    \n","    def __getitem__(self, index):\n","        path = self.pathes[index]\n","        text = self.get_filename(path)\n","        image = Image.open(path).convert('RGB')\n","        # image = image.resize((height_mean,width_mean))\n","        # print(np.array(image).shape)\n","        image = self.transform(image)\n","        return image, text\n","    \n","    def get_filename(self, path: str) -> str:\n","      \n","        return \".\".join(os.path.basename(path).split(\".\")[:-1]).strip()\n","\n","    def transform(self, image):\n","        \n","        transform_ops = transforms.Compose([\n","            transforms.Resize((height_mean,width_mean)),\n","            transforms.ToTensor(),\n","            # transforms.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n","        ])\n","        return transform_ops(image)"],"metadata":{"id":"sZhWMKcWZO8M","executionInfo":{"status":"ok","timestamp":1686417914126,"user_tz":-420,"elapsed":2,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":462,"outputs":[]},{"cell_type":"code","source":["batch_size = 16\n","cpu_count = mp.cpu_count()\n","print(cpu_count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7VzPQ716ZdxF","executionInfo":{"status":"ok","timestamp":1686417021417,"user_tz":-420,"elapsed":423,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"5336efff-f68b-4392-f3a9-5333c9dfbd9e"},"execution_count":395,"outputs":[{"output_type":"stream","name":"stdout","text":["2\n"]}]},{"cell_type":"code","source":["trainset = TEXTDataset(Path('/content/img2text/train')) \n","testset = TEXTDataset(Path('/content/img2text/test'))\n","valset = TEXTDataset(Path('/content/img2text/val'))\n","train_loader = DataLoader(trainset, batch_size=batch_size, num_workers=cpu_count, shuffle=True)\n","test_loader = DataLoader(testset, batch_size=batch_size, num_workers=cpu_count, shuffle=False)\n","val_loader = DataLoader(valset, batch_size=batch_size, num_workers=cpu_count, shuffle=False)\n","print(len(train_loader), len(test_loader),len(val_loader))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GMt2pqM_ZUz1","executionInfo":{"status":"ok","timestamp":1686417919934,"user_tz":-420,"elapsed":4,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"0b327b5a-4edf-4fe5-813a-abc642591a20"},"execution_count":463,"outputs":[{"output_type":"stream","name":"stdout","text":["141 8 8\n"]}]},{"cell_type":"code","source":["i = np.random.choice(len(train_loader))\n","print(trainset[i][1])\n","Image.fromarray(np.array(trainset[i][0] * 255).astype(np.uint8).transpose((1, 2, 0)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"21JuXfe34GdA","executionInfo":{"status":"ok","timestamp":1686417717678,"user_tz":-420,"elapsed":18,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"6ab8d783-2dc0-4400-8093-f6aa228de21b"},"execution_count":442,"outputs":[{"output_type":"stream","name":"stdout","text":["105.55\n"]},{"output_type":"execute_result","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=32x11 at 0x7F3C5D62EB90>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAACAAAAALCAIAAACRcxhWAAADJklEQVR4nD2T3Us6TRTH53Vnd9Y1rUhWUSQhEiIk9SboL+62yyCii4gyorAXshcqLTUrXdbFmZ2Z38XwPHN1znDe5nw/A5VSUkqMMUJIa40QSpLEGOP7vjEGQmiMUUphjAEAEEIIIQDAXiKEAAD/GwAAIYTrujbApsM0TSGEWuskSRBCjuNQSpVSURRFURQEQSaTsa6tlc1mXddVStne39/fWmvP8xhjjLHFYjGfz9M0JYT4vs8YIwihNE0/Pj7Ozs7CMNza2lpaWhoOh09PTz8/P4yxZrP5+/vb6XQYY0EQ1Ov1MAxt9a+vr6Ojo1wuRwip1+vlcrnb7T4/P2OMl5eXG40GY4xoraMoent76/V6CKF2u50kyePjo1Jqe3u71+sdHx+HYei6brPZ9H3f8zwAQJqmlNLZbGaMabfbGGPOudZ6PB7n8/l2uw0hpJQCAAiEkDFWq9XiOIYQSimTJJnNZpVKpVqtOo5zcHDAORdCGGMopZ7nGWMcxzHGJEkyn88dx3EchzFmVbQr8n3fdV0IIUIIcc6LxSJjLI5jQogQYjqd2kk55wCAIAgQQg8PD6enp8PhUP93VlZWMpnM9fX1yclJv98HAGSz2cVicXV1dX5+Ph6PjTHIjmYB0FobY7TWGGOMsXWVUmEYtlqtWq0mpTw8PLQ4CSGKxeLe3l6pVJJSXl5e/v39bW5utlqtUqn0/v7e7XallERrbSmyL8IYe56HMY6iCCEURRHGOAiCtbU1KaXruvv7+2maIoQopRjjMAwBAFEUdTqdJEmKxWI2m3UcZzAYRFEkpSSO4wghPj8/h8OhNQqFQj6ff3l5wRgPBoNyuTydTieTSRAENzc3lUpFCHF7e2uM4ZwjhFzXfX19XV9fJ4R0u13O+Xw+7/f7GxsbjDECAJjP5+Px2P6U0Wi0urraarUeHh7u7u4KhUKj0ZhMJvf39xBCzvnu7i5jzBiTyWQopb1eTymVy+Us36PR6OLighCys7NTrVYJIVBKaeHRWgshGGOUUq11mqZKKUqplT1NUwCA1YYxJoSwhMRxnKYp59xxHAhhHMeWJUKI3eE/L+rjZbksAKwAAAAASUVORK5CYII=\n"},"metadata":{},"execution_count":442}]},{"cell_type":"code","source":["print(trainset[i][1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FEAHwg0oBeQI","executionInfo":{"status":"ok","timestamp":1686417722213,"user_tz":-420,"elapsed":554,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"275022b2-15bb-457c-a853-643505760247"},"execution_count":443,"outputs":[{"output_type":"stream","name":"stdout","text":["105.55\n"]}]},{"cell_type":"code","source":["batch_test = next(iter(train_loader))"],"metadata":{"id":"OJWWkBCF40Hy","executionInfo":{"status":"ok","timestamp":1686413390099,"user_tz":-420,"elapsed":1143,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":227,"outputs":[]},{"cell_type":"code","source":["batch_test[1][0]\n","Image.fromarray(np.array(batch_test[0][0] * 255).astype(np.uint8).transpose((1, 2, 0)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":40},"id":"BinfM41w59GF","executionInfo":{"status":"ok","timestamp":1686417729754,"user_tz":-420,"elapsed":455,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"e6f326db-4986-4c05-aa4b-6252b66da09c"},"execution_count":444,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=257x23 at 0x7F3C5D62D930>"],"image/png":"\n"},"metadata":{},"execution_count":444}]},{"cell_type":"code","source":["batch_test[0][0].shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LVOI_i719mJ6","executionInfo":{"status":"ok","timestamp":1686411573626,"user_tz":-420,"elapsed":447,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"427eb0b0-adc5-45ef-8f9f-344ab1fe4da3"},"execution_count":136,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([3, 23, 257])"]},"metadata":{},"execution_count":136}]},{"cell_type":"markdown","source":["**Define Model**"],"metadata":{"id":"NyhW0qp6Zr55"}},{"cell_type":"code","source":["def plot_loss(epoch: int, \n","              train_losses: list, \n","              val_losses: list, \n","              n_steps: int = 100):\n","    \n","    # clear previous graph\n","    clear_output(True)\n","    # making titles\n","    train_title = f'Epoch:{epoch} | Train Loss:{np.mean(train_losses[-n_steps:]):.6f}'\n","    val_title = f'Epoch:{epoch} | Val Loss:{np.mean(val_losses[-n_steps:]):.6f}'\n","\n","    fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n","    ax[0].plot(train_losses)\n","    ax[1].plot(val_losses)\n","\n","    ax[0].set_title(train_title)\n","    ax[1].set_title(val_title)\n","\n","    plt.show()\n","\n","def print_prediction(model, dataset, device, label_converter):\n","    idx = np.random.randint(len(dataset))\n","    path = dataset.pathes[idx]\n","    \n","    with torch.no_grad():\n","        model.eval()\n","        img, target_text = dataset[idx]\n","        img = img.unsqueeze(0)\n","        logits = model(img.to(device))\n","        \n","    pred_text = decode_prediction(logits.cpu(), label_converter)\n","\n","    img = np.asarray(Image.open(path).convert('L'))\n","    title = f'Truth: {target_text} | Pred: {pred_text}'\n","    plt.imshow(img)\n","    plt.title(title)\n","    plt.axis('off')"],"metadata":{"id":"UL_EnJJZe6WI","executionInfo":{"status":"ok","timestamp":1686409086685,"user_tz":-420,"elapsed":3,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["class strLabelConverter(object):\n","\n","    def __init__(self, alphabet: str, ignore_case: bool = True):\n","        self._ignore_case = ignore_case\n","        # if self._ignore_case:\n","        #     alphabet = alphabet.lower()\n","        # self.alphabet = alphabet + '-'  # for `-1` index\n","        self.alphabet = alphabet\n","      \n","        self.char2idx = {}\n","        for i_, char_ in enumerate(self.alphabet):\n","            self.char2idx[char_] = i_\n","        self.idx2char = {idx: char for char, idx in self.char2idx.items()}\n","        print(self.char2idx)\n","        print(self.idx2char)\n","\n","    def encode(self, text):\n","        if isinstance(text, str):\n","            text = [\n","                self.char2idx[char if self._ignore_case else char]\n","                for char in text\n","            ]\n","            length = [len(text)]\n","        elif isinstance(text, collections.abc.Iterable):\n","            length = [len(s) for s in text]\n","            text = ''.join(text)\n","            text, _ = self.encode(text)\n","        return (torch.IntTensor(text), torch.IntTensor(length))\n","\n","    def decode(self, t, length, raw=False):\n","        if length.numel() == 1:\n","            length = length[0]\n","            assert t.numel() == length, \"text with length: {} does not match declared length: {}\".format(t.numel(), length)\n","            if raw:\n","                return ''.join([self.alphabet[i - 1] for i in t])\n","            else:\n","                char_list = []\n","                for i in range(length):\n","                    if t[i] != 0 and (not (i > 0 and t[i - 1] == t[i])):\n","                        char_list.append(self.alphabet[t[i] - 1])\n","                return ''.join(char_list)\n","        else:\n","            # batch mode\n","            assert t.numel() == length.sum(), \"texts with length: {} does not match declared length: {}\".format(t.numel(), length.sum())\n","            texts = []\n","            index = 0\n","            for i in range(length.numel()):\n","                l = length[i]\n","                texts.append(\n","                    self.decode(\n","                        t[index:index + l], torch.IntTensor([l]), raw=raw))\n","                index += l\n","        return texts\n","\n","\n","def decode_prediction(logits: torch.Tensor, \n","                      label_converter: strLabelConverter) -> str:\n","    tokens = logits.softmax(2).argmax(2)\n","    tokens = tokens.squeeze(1).numpy()\n","    \n","    # convert tor stings tokens\n","    tokens = ''.join([label_converter.idx2char[token] \n","                      if token != 0  else '-' \n","                      for token in tokens])\n","    tokens = tokens.split('-')\n","    \n","    # remove duplicates\n","    text = [char \n","            for batch_token in tokens \n","            for idx, char in enumerate(batch_token)\n","            if char != batch_token[idx-1] or len(batch_token) == 1]\n","    text = ''.join(text)\n","    return text"],"metadata":{"id":"aWL4AF15Tpwb","executionInfo":{"status":"ok","timestamp":1686418001062,"user_tz":-420,"elapsed":2,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":467,"outputs":[]},{"cell_type":"code","source":["class blockCNN(nn.Module):\n","    def __init__(self, in_nc, out_nc, kernel_size, padding, stride=1):\n","        super(blockCNN, self).__init__()\n","        self.in_nc = in_nc\n","        self.out_nc = out_nc\n","        self.kernel_size = kernel_size\n","        self.padding = padding\n","        # layers\n","        self.conv = nn.Conv2d(in_nc, out_nc, \n","                              kernel_size=kernel_size, \n","                              stride=stride, \n","                              padding=padding)\n","        self.bn = nn.BatchNorm2d(out_nc)\n","        \n","    def forward(self, batch, use_bn=False, use_relu=False, \n","                use_maxpool=False, maxpool_kernelsize=None):\n","        batch = self.conv(batch)\n","        if use_bn:\n","            batch = self.bn(batch)\n","        if use_relu:\n","            batch = F.relu(batch)\n","        if use_maxpool:\n","            assert maxpool_kernelsize is not None\n","            batch = F.max_pool2d(batch, kernel_size=maxpool_kernelsize, stride=2)\n","        return batch\n","\n","class blockRNN(nn.Module):\n","    def __init__(self, in_size, hidden_size, out_size, bidirectional, dropout=0):\n","        super(blockRNN, self).__init__()\n","        self.in_size = in_size\n","        self.hidden_size = hidden_size\n","        self.out_size = out_size\n","        self.bidirectional = bidirectional\n","        # layers\n","        self.gru = nn.GRU(in_size, hidden_size, bidirectional=bidirectional)\n","        \n","    def forward(self, batch, add_output=False):\n","        batch_size = batch.size(1)\n","        outputs, hidden = self.gru(batch)\n","        out_size = int(outputs.size(2) / 2)\n","        if add_output:\n","            outputs = outputs[:, :, :out_size] + outputs[:, :, out_size:]\n","        return outputs"],"metadata":{"id":"RCuAGWIVTtnn","executionInfo":{"status":"ok","timestamp":1686409092607,"user_tz":-420,"elapsed":3,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["num_chars = len(char2idx)\n","print(num_chars)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9BluzpKhTxm7","executionInfo":{"status":"ok","timestamp":1686417741548,"user_tz":-420,"elapsed":2472,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"7ee8b920-7455-4fe5-9912-66f9d62a911f"},"execution_count":445,"outputs":[{"output_type":"stream","name":"stdout","text":["19\n"]}]},{"cell_type":"code","source":["imgs, texts = next(iter(val_loader))\n","print(imgs.shape, len(texts))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_f0hUAZyURzZ","executionInfo":{"status":"ok","timestamp":1686418284281,"user_tz":-420,"elapsed":379,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"c07617fa-9d4f-4e55-9868-46312b91e447"},"execution_count":479,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([16, 3, 11, 32]) 16\n"]}]},{"cell_type":"code","source":["def weights_init(m):\n","    classname = m.__class__.__name__\n","    if type(m) in [nn.Linear, nn.Conv2d, nn.Conv1d]:\n","        torch.nn.init.xavier_uniform_(m.weight)\n","        # m.bias.data.fill_(0.01)\n","    elif classname.find('BatchNorm') != -1:\n","        m.weight.data.normal_(1.0, 0.02)\n","        # m.bias.data.fill_(0)"],"metadata":{"id":"AOxVjk2GVrxh","executionInfo":{"status":"ok","timestamp":1686418468130,"user_tz":-420,"elapsed":524,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":487,"outputs":[]},{"cell_type":"code","source":["class CRNN(nn.Module):\n","    def __init__(self, hidden_size: int, \n","                 vocab_size: int, \n","                 bidirectional: bool = True, \n","                 dropout: float = 0.5):\n","        super(CRNN, self).__init__()\n","        self.hidden_size = hidden_size\n","        self.vocab_size = vocab_size\n","        self.bidirectional = bidirectional\n","        # make layers\n","        # convolutions \n","        resnet = resnet18(pretrained=True)\n","        modules = list(resnet.children())[:-3]\n","        self.resnet = nn.Sequential(*modules)\n","        #PRETRAINED^\n","        \n","        \n","        \n","        # self.cn6 = blockCNN(256, 256, kernel_size=3, padding=1)\n","        self.cn6 = nn.Sequential(\n","            nn.Conv2d(256, 256, kernel_size=(3,3), stride=1, padding=5),\n","            nn.BatchNorm2d(256),\n","            nn.ReLU(inplace=True)\n","        )\n","        # RNN + Linear\n","        self.linear1 = nn.Linear(2304, 256)\n","        self.gru1 = blockRNN(256, hidden_size, hidden_size,\n","                             dropout=dropout, \n","                             bidirectional=bidirectional)\n","        self.gru2 = blockRNN(hidden_size, hidden_size, vocab_size,\n","                             dropout=dropout,\n","                             bidirectional=bidirectional)\n","        self.linear2 = nn.Linear(hidden_size * 2, vocab_size)\n","        \n","    def forward(self, batch: torch.Tensor):\n","        batch_size = batch.size(0)\n","        # convolutions\n","        batch = self.resnet(batch)\n","        \n","        # print(\"here\")\n","        # print(batch)\n","        # print(\"=================================\")\n","        # batch = self.cn6(batch, use_relu=True, use_bn=True)\n","        batch = self.cn6(batch)\n","        # make sequences of image features\n","        batch = batch.permute(0, 3, 1, 2)\n","        # print(batch.shape)\n","        n_channels = batch.size(1)\n","        batch = batch.view(batch_size, n_channels, -1)\n","        batch = self.linear1(batch)\n","        # rnn layers\n","        batch = self.gru1(batch, add_output=True)\n","        batch = self.gru2(batch)\n","        # output\n","        batch = self.linear2(batch)\n","        batch = batch.permute(1, 0, 2)\n","        return batch"],"metadata":{"id":"5AIZUHXcVsRt","executionInfo":{"status":"ok","timestamp":1686420465208,"user_tz":-420,"elapsed":1,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":569,"outputs":[]},{"cell_type":"code","source":["hidden_size = 256\n","bidirectional = True\n","dropout = 0.1\n","weight_decay = 1e-5\n","momentum = 0.9\n","clip_norm = 5\n","max_epoch = 50"],"metadata":{"id":"j5jkc4t4V5wt","executionInfo":{"status":"ok","timestamp":1686417760591,"user_tz":-420,"elapsed":1,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":449,"outputs":[]},{"cell_type":"code","source":["device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","crnn = CRNN(hidden_size=hidden_size, vocab_size=num_chars, \n","            bidirectional=bidirectional, dropout=dropout)\n","# crnn = CRNN(num_chars=num_chars,rnn_hidden_size=hidden_size, dropout=dropout)\n","crnn.apply(weights_init)\n","crnn = crnn.to(device)\n","# crnn(imgs.to(device)).shape"],"metadata":{"id":"Jsev2pPHVwmF","executionInfo":{"status":"ok","timestamp":1686420474800,"user_tz":-420,"elapsed":568,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":570,"outputs":[]},{"cell_type":"code","source":["from torchsummary import summary\n","\n","summary(crnn, (3, 11, 32))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1rij26kDcujC","executionInfo":{"status":"ok","timestamp":1686420476135,"user_tz":-420,"elapsed":4,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"576f727b-b395-4a6f-baaa-1189985cb100"},"execution_count":571,"outputs":[{"output_type":"stream","name":"stdout","text":["----------------------------------------------------------------\n","        Layer (type)               Output Shape         Param #\n","================================================================\n","            Conv2d-1            [-1, 64, 6, 16]           9,408\n","       BatchNorm2d-2            [-1, 64, 6, 16]             128\n","              ReLU-3            [-1, 64, 6, 16]               0\n","         MaxPool2d-4             [-1, 64, 3, 8]               0\n","            Conv2d-5             [-1, 64, 3, 8]          36,864\n","       BatchNorm2d-6             [-1, 64, 3, 8]             128\n","              ReLU-7             [-1, 64, 3, 8]               0\n","            Conv2d-8             [-1, 64, 3, 8]          36,864\n","       BatchNorm2d-9             [-1, 64, 3, 8]             128\n","             ReLU-10             [-1, 64, 3, 8]               0\n","       BasicBlock-11             [-1, 64, 3, 8]               0\n","           Conv2d-12             [-1, 64, 3, 8]          36,864\n","      BatchNorm2d-13             [-1, 64, 3, 8]             128\n","             ReLU-14             [-1, 64, 3, 8]               0\n","           Conv2d-15             [-1, 64, 3, 8]          36,864\n","      BatchNorm2d-16             [-1, 64, 3, 8]             128\n","             ReLU-17             [-1, 64, 3, 8]               0\n","       BasicBlock-18             [-1, 64, 3, 8]               0\n","           Conv2d-19            [-1, 128, 2, 4]          73,728\n","      BatchNorm2d-20            [-1, 128, 2, 4]             256\n","             ReLU-21            [-1, 128, 2, 4]               0\n","           Conv2d-22            [-1, 128, 2, 4]         147,456\n","      BatchNorm2d-23            [-1, 128, 2, 4]             256\n","           Conv2d-24            [-1, 128, 2, 4]           8,192\n","      BatchNorm2d-25            [-1, 128, 2, 4]             256\n","             ReLU-26            [-1, 128, 2, 4]               0\n","       BasicBlock-27            [-1, 128, 2, 4]               0\n","           Conv2d-28            [-1, 128, 2, 4]         147,456\n","      BatchNorm2d-29            [-1, 128, 2, 4]             256\n","             ReLU-30            [-1, 128, 2, 4]               0\n","           Conv2d-31            [-1, 128, 2, 4]         147,456\n","      BatchNorm2d-32            [-1, 128, 2, 4]             256\n","             ReLU-33            [-1, 128, 2, 4]               0\n","       BasicBlock-34            [-1, 128, 2, 4]               0\n","           Conv2d-35            [-1, 256, 1, 2]         294,912\n","      BatchNorm2d-36            [-1, 256, 1, 2]             512\n","             ReLU-37            [-1, 256, 1, 2]               0\n","           Conv2d-38            [-1, 256, 1, 2]         589,824\n","      BatchNorm2d-39            [-1, 256, 1, 2]             512\n","           Conv2d-40            [-1, 256, 1, 2]          32,768\n","      BatchNorm2d-41            [-1, 256, 1, 2]             512\n","             ReLU-42            [-1, 256, 1, 2]               0\n","       BasicBlock-43            [-1, 256, 1, 2]               0\n","           Conv2d-44            [-1, 256, 1, 2]         589,824\n","      BatchNorm2d-45            [-1, 256, 1, 2]             512\n","             ReLU-46            [-1, 256, 1, 2]               0\n","           Conv2d-47            [-1, 256, 1, 2]         589,824\n","      BatchNorm2d-48            [-1, 256, 1, 2]             512\n","             ReLU-49            [-1, 256, 1, 2]               0\n","       BasicBlock-50            [-1, 256, 1, 2]               0\n","           Conv2d-51           [-1, 256, 9, 10]         590,080\n","      BatchNorm2d-52           [-1, 256, 9, 10]             512\n","             ReLU-53           [-1, 256, 9, 10]               0\n","           Linear-54              [-1, 10, 256]         590,080\n","              GRU-55  [[-1, 10, 512], [-1, 10, 256]]               0\n","         blockRNN-56              [-1, 10, 256]               0\n","              GRU-57  [[-1, 10, 512], [-1, 10, 256]]               0\n","         blockRNN-58              [-1, 10, 512]               0\n","           Linear-59               [-1, 10, 19]           9,747\n","================================================================\n","Total params: 3,973,203\n","Trainable params: 3,973,203\n","Non-trainable params: 0\n","----------------------------------------------------------------\n","Input size (MB): 0.00\n","Forward/backward pass size (MB): 198.89\n","Params size (MB): 15.16\n","Estimated Total Size (MB): 214.05\n","----------------------------------------------------------------\n"]}]},{"cell_type":"code","source":["imgs.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8lJ64vSHZQ7f","executionInfo":{"status":"ok","timestamp":1686420490052,"user_tz":-420,"elapsed":581,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"a6f4331f-155b-492d-865e-25d7a4285e04"},"execution_count":572,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([16, 3, 11, 32])"]},"metadata":{},"execution_count":572}]},{"cell_type":"code","source":["crnn(imgs.to(device))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EO5Kn7zr7Bwu","executionInfo":{"status":"ok","timestamp":1686420497158,"user_tz":-420,"elapsed":4,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"ab755748-e80b-43c9-fe3d-e6764c6ea042"},"execution_count":575,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[[-0.0688,  0.0487,  0.0484,  ...,  0.1609, -0.0194,  0.0075],\n","         [-0.0689,  0.0605,  0.0458,  ...,  0.2004, -0.0107,  0.0342],\n","         [-0.0655,  0.0675,  0.0451,  ...,  0.2239, -0.0035,  0.0506],\n","         ...,\n","         [-0.0509,  0.0637,  0.0375,  ...,  0.2240,  0.0088,  0.1023],\n","         [-0.0397,  0.0524,  0.0307,  ...,  0.2019,  0.0141,  0.1153],\n","         [-0.0189,  0.0299,  0.0190,  ...,  0.1663,  0.0265,  0.1258]],\n","\n","        [[-0.0688,  0.0487,  0.0484,  ...,  0.1609, -0.0194,  0.0075],\n","         [-0.0689,  0.0605,  0.0458,  ...,  0.2004, -0.0107,  0.0342],\n","         [-0.0655,  0.0675,  0.0451,  ...,  0.2239, -0.0035,  0.0506],\n","         ...,\n","         [-0.0509,  0.0637,  0.0375,  ...,  0.2240,  0.0088,  0.1023],\n","         [-0.0397,  0.0524,  0.0307,  ...,  0.2019,  0.0141,  0.1153],\n","         [-0.0189,  0.0299,  0.0190,  ...,  0.1663,  0.0265,  0.1258]],\n","\n","        [[-0.0688,  0.0487,  0.0484,  ...,  0.1609, -0.0194,  0.0075],\n","         [-0.0689,  0.0605,  0.0458,  ...,  0.2004, -0.0107,  0.0342],\n","         [-0.0655,  0.0675,  0.0451,  ...,  0.2239, -0.0035,  0.0506],\n","         ...,\n","         [-0.0509,  0.0637,  0.0375,  ...,  0.2240,  0.0088,  0.1023],\n","         [-0.0397,  0.0524,  0.0307,  ...,  0.2019,  0.0141,  0.1153],\n","         [-0.0189,  0.0299,  0.0190,  ...,  0.1663,  0.0265,  0.1258]],\n","\n","        ...,\n","\n","        [[-0.0688,  0.0487,  0.0484,  ...,  0.1609, -0.0194,  0.0075],\n","         [-0.0689,  0.0605,  0.0458,  ...,  0.2004, -0.0107,  0.0342],\n","         [-0.0655,  0.0675,  0.0451,  ...,  0.2239, -0.0035,  0.0506],\n","         ...,\n","         [-0.0509,  0.0637,  0.0375,  ...,  0.2240,  0.0088,  0.1023],\n","         [-0.0397,  0.0524,  0.0307,  ...,  0.2019,  0.0141,  0.1153],\n","         [-0.0189,  0.0299,  0.0190,  ...,  0.1663,  0.0265,  0.1258]],\n","\n","        [[-0.0688,  0.0487,  0.0484,  ...,  0.1609, -0.0194,  0.0075],\n","         [-0.0689,  0.0605,  0.0458,  ...,  0.2004, -0.0107,  0.0342],\n","         [-0.0655,  0.0675,  0.0451,  ...,  0.2239, -0.0035,  0.0506],\n","         ...,\n","         [-0.0509,  0.0637,  0.0375,  ...,  0.2240,  0.0088,  0.1023],\n","         [-0.0397,  0.0524,  0.0307,  ...,  0.2019,  0.0141,  0.1153],\n","         [-0.0189,  0.0299,  0.0190,  ...,  0.1663,  0.0265,  0.1258]],\n","\n","        [[-0.0688,  0.0487,  0.0484,  ...,  0.1609, -0.0194,  0.0075],\n","         [-0.0689,  0.0605,  0.0458,  ...,  0.2004, -0.0107,  0.0342],\n","         [-0.0655,  0.0675,  0.0451,  ...,  0.2239, -0.0035,  0.0506],\n","         ...,\n","         [-0.0509,  0.0637,  0.0375,  ...,  0.2240,  0.0088,  0.1023],\n","         [-0.0397,  0.0524,  0.0307,  ...,  0.2019,  0.0141,  0.1153],\n","         [-0.0189,  0.0299,  0.0190,  ...,  0.1663,  0.0265,  0.1258]]],\n","       device='cuda:0', grad_fn=<PermuteBackward0>)"]},"metadata":{},"execution_count":575}]},{"cell_type":"markdown","source":["**Loss**"],"metadata":{"id":"7MGBS8gY1NZ3"}},{"cell_type":"code","source":["lr = 0.02\n","optimizer = torch.optim.SGD(crnn.parameters(), lr=lr, nesterov=True, \n","                            weight_decay=weight_decay, momentum=momentum)\n","critertion = nn.CTCLoss(blank=0)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, verbose=True, patience=5)"],"metadata":{"id":"zkimb1Bq1Ppo","executionInfo":{"status":"ok","timestamp":1686417802343,"user_tz":-420,"elapsed":572,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":456,"outputs":[]},{"cell_type":"code","source":["def calculate_loss(logits, texts, label_converter):\n","    # get infomation from prediction\n","    device = logits.device\n","    input_len, batch_size, vocab_size = logits.size()\n","    # encode inputs\n","    logits = logits.log_softmax(2)\n","    encoded_texts, text_lens = label_converter.encode(texts)\n","    logits_lens = torch.full(size=(batch_size,), fill_value=input_len, dtype=torch.int32)\n","    # calculate ctc\n","    loss = critertion(logits, encoded_texts, \n","                      logits_lens.to(device), text_lens)\n","    return loss"],"metadata":{"id":"pViwdOu61Z70","executionInfo":{"status":"ok","timestamp":1686417807100,"user_tz":-420,"elapsed":1,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":457,"outputs":[]},{"cell_type":"code","source":["def validation(model, val_losses, label_converter):\n","    with torch.no_grad():\n","        model.eval()\n","        for batch_img, batch_text in val_loader:\n","            logits = crnn(batch_img.to(device))\n","            val_loss = calculate_loss(logits, batch_text, label_converter)\n","            val_losses.append(val_loss.item())\n","    return val_losses"],"metadata":{"id":"MHf1Pwar1TZk","executionInfo":{"status":"ok","timestamp":1686417813852,"user_tz":-420,"elapsed":1,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":458,"outputs":[]},{"cell_type":"markdown","source":["**Training**"],"metadata":{"id":"mDaBOXW71hW6"}},{"cell_type":"code","source":["train_losses = []\n","val_losses = []\n","val_epoch_len = len(valset) // batch_size\n","val_epoch_len"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LrL1x9xK1iHx","executionInfo":{"status":"ok","timestamp":1686417815263,"user_tz":-420,"elapsed":5,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"9374bd7e-2e66-48f0-891a-616f7631effc"},"execution_count":459,"outputs":[{"output_type":"execute_result","data":{"text/plain":["7"]},"metadata":{},"execution_count":459}]},{"cell_type":"code","source":["label_converter = strLabelConverter(vocabulary)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tS7rrZie2GVl","executionInfo":{"status":"ok","timestamp":1686418030142,"user_tz":-420,"elapsed":592,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"65b6f3a8-bfa3-4bad-e5ff-8c2e44c3b53b"},"execution_count":469,"outputs":[{"output_type":"stream","name":"stdout","text":["{'#': 0, ' ': 1, '$': 2, '%': 3, '+': 4, ',': 5, '-': 6, '.': 7, '0': 8, '1': 9, '2': 10, '3': 11, '4': 12, '5': 13, '6': 14, '7': 15, '8': 16, '9': 17, 'E': 18}\n","{0: '#', 1: ' ', 2: '$', 3: '%', 4: '+', 5: ',', 6: '-', 7: '.', 8: '0', 9: '1', 10: '2', 11: '3', 12: '4', 13: '5', 14: '6', 15: '7', 16: '8', 17: '9', 18: 'E'}\n"]}]},{"cell_type":"code","source":["for epoch in range(max_epoch):\n","        crnn.train()\n","        for idx, (batch_imgs, batch_text) in enumerate(train_loader):\n","            optimizer.zero_grad()\n","            # print(batch_imgs.shape)\n","            logits = crnn(batch_imgs.to(device))\n","            # print(logits)\n","            # calculate loss\n","            train_loss = calculate_loss(logits, batch_text, label_converter)\n","            if np.isnan(train_loss.detach().cpu().numpy()):\n","                print(\"here\")\n","                continue\n","            train_losses.append(train_loss.item())\n","            # make backward\n","            train_loss.backward()\n","\n","            nn.utils.clip_grad_norm_(crnn.parameters(), clip_norm)\n","            optimizer.step()\n","        \n","        val_losses = validation(crnn, val_losses, label_converter)\n","        print(train_losses,val_losses)\n","        # printing progress\n","        plot_loss(epoch, train_losses, val_losses)\n","        print_prediction(crnn, valset, device, label_converter)\n","        \n","        scheduler.step(val_losses[-1])\n","        # epoch += 1\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":923},"id":"aqioOdEf1jsj","executionInfo":{"status":"error","timestamp":1686421139850,"user_tz":-420,"elapsed":8489,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"f7260342-0911-486e-8aae-2959e3274cd8"},"execution_count":603,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-603-482418f9f0d2>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m             \u001b[0mtrain_losses\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_loss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m             \u001b[0;31m# make backward\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m             \u001b[0mtrain_loss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m             \u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclip_grad_norm_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcrnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclip_norm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/_tensor.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    485\u001b[0m                 \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    486\u001b[0m             )\n\u001b[0;32m--> 487\u001b[0;31m         torch.autograd.backward(\n\u001b[0m\u001b[1;32m    488\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgradient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    489\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/autograd/__init__.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    198\u001b[0m     \u001b[0;31m# some Python versions print out the first line of a multi-line function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    199\u001b[0m     \u001b[0;31m# calls in the traceback and some print out the last line\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 200\u001b[0;31m     Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n\u001b[0m\u001b[1;32m    201\u001b[0m         \u001b[0mtensors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrad_tensors_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m         allow_unreachable=True, accumulate_grad=True)  # Calls into the C++ engine to run the backward pass\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["def print_prediction(model, dataset, device, label_converter):\n","    idx = np.random.randint(len(dataset))\n","    path = dataset.pathes[idx]\n","    \n","    with torch.no_grad():\n","        model.eval()\n","        img, target_text = dataset[idx]\n","        img = img.unsqueeze(0)\n","        logits = model(img.to(device))\n","        # return logits\n","    pred_text = decode_prediction(logits.cpu(), label_converter)\n","\n","    img = np.asarray(Image.open(path).convert('L'))\n","    title = f'Truth: {target_text} | Pred: {pred_text}'\n","    plt.imshow(img)\n","    plt.title(title)\n","    plt.axis('off')"],"metadata":{"id":"LPTbqyuZFnL-","executionInfo":{"status":"ok","timestamp":1686421169821,"user_tz":-420,"elapsed":3,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":604,"outputs":[]},{"cell_type":"code","source":["logits = print_prediction(crnn, valset, device, label_converter)"],"metadata":{"id":"oHOO5HQ9Gf7N","executionInfo":{"status":"ok","timestamp":1686420928748,"user_tz":-420,"elapsed":2,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":585,"outputs":[]},{"cell_type":"code","source":["def decode_prediction(logits: torch.Tensor, \n","                      label_converter: strLabelConverter) -> str:\n","    print(logits)\n","    tokens = logits.softmax(2).argmax(2)\n","    print(tokens)\n","    tokens = tokens.squeeze(1).numpy()\n","    \n","    # convert tor stings tokens\n","    tokens = ''.join([label_converter.idx2char[token] \n","                      if token != 0  else '-' \n","                      for token in tokens])\n","    tokens = tokens.split('-')\n","    \n","    # remove duplicates\n","    text = [char \n","            for batch_token in tokens \n","            for idx, char in enumerate(batch_token)\n","            if char != batch_token[idx-1] or len(batch_token) == 1]\n","    text = ''.join(text)\n","    return text"],"metadata":{"id":"CZbgcqjxHUMK","executionInfo":{"status":"ok","timestamp":1686421011146,"user_tz":-420,"elapsed":1,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}}},"execution_count":598,"outputs":[]},{"cell_type":"code","source":["decode_prediction(logits.cpu(),label_converter)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":886},"id":"M1ewUF6mhWII","executionInfo":{"status":"ok","timestamp":1686421064484,"user_tz":-420,"elapsed":40,"user":{"displayName":"PHÚ NGUYỄN ĐẮC HOÀNG","userId":"05644926397827677174"}},"outputId":"fe4a5e54-0162-4933-9bd5-86218ff05c96"},"execution_count":602,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[[-0.0357,  0.0030,  0.0216, -0.0160,  0.0058,  0.0423, -0.0180,\n","          -0.0268, -0.0089, -0.0019, -0.0785, -0.0856, -0.0023,  0.0362,\n","           0.0241,  0.0254,  0.0688, -0.0024,  0.0652]],\n","\n","        [[-0.0357,  0.0030,  0.0216, -0.0160,  0.0058,  0.0423, -0.0180,\n","          -0.0268, -0.0089, -0.0019, -0.0785, -0.0856, -0.0023,  0.0362,\n","           0.0241,  0.0254,  0.0688, -0.0024,  0.0652]],\n","\n","        [[-0.0357,  0.0030,  0.0216, -0.0160,  0.0058,  0.0423, -0.0180,\n","          -0.0268, -0.0089, -0.0019, -0.0785, -0.0856, -0.0023,  0.0362,\n","           0.0241,  0.0254,  0.0688, -0.0024,  0.0652]],\n","\n","        [[-0.2980, -0.0515, -0.0603,  0.1846, -0.0926,  0.0210, -0.2684,\n","           0.2066, -0.0402, -0.1721, -0.1820, -0.0645,  0.0084, -0.3062,\n","           0.0652, -0.0058, -0.0113, -0.3546, -0.1502]],\n","\n","        [[-0.2191,  0.1730,  0.2520,  0.1105, -0.1326,  0.2748, -0.0964,\n","           0.2044, -0.0010,  0.0305, -0.2115, -0.1875,  0.1456, -0.0357,\n","           0.0497,  0.1775, -0.1668, -0.0800,  0.1397]],\n","\n","        [[-0.1335, -0.1994,  0.0935, -0.2022, -0.0833, -0.1071, -0.1196,\n","           0.2899,  0.0436,  0.0963,  0.0140, -0.0814,  0.0794, -0.1197,\n","           0.1895,  0.1467,  0.0434,  0.1401,  0.0414]],\n","\n","        [[ 0.0056,  0.0011,  0.0284, -0.1642, -0.0788, -0.1585, -0.0734,\n","          -0.1137,  0.0486,  0.2062, -0.2302, -0.2773,  0.0033,  0.2017,\n","          -0.0142, -0.0017,  0.1036,  0.0046,  0.0967]],\n","\n","        [[-0.0357,  0.0030,  0.0216, -0.0160,  0.0058,  0.0423, -0.0180,\n","          -0.0268, -0.0089, -0.0019, -0.0785, -0.0856, -0.0023,  0.0362,\n","           0.0241,  0.0254,  0.0688, -0.0024,  0.0652]],\n","\n","        [[-0.0357,  0.0030,  0.0216, -0.0160,  0.0058,  0.0423, -0.0180,\n","          -0.0268, -0.0089, -0.0019, -0.0785, -0.0856, -0.0023,  0.0362,\n","           0.0241,  0.0254,  0.0688, -0.0024,  0.0652]],\n","\n","        [[-0.0357,  0.0030,  0.0216, -0.0160,  0.0058,  0.0423, -0.0180,\n","          -0.0268, -0.0089, -0.0019, -0.0785, -0.0856, -0.0023,  0.0362,\n","           0.0241,  0.0254,  0.0688, -0.0024,  0.0652]]])\n","tensor([[16],\n","        [16],\n","        [16],\n","        [ 7],\n","        [ 5],\n","        [ 7],\n","        [ 9],\n","        [16],\n","        [16],\n","        [16]])\n"]},{"output_type":"execute_result","data":{"text/plain":["'.,.18'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":602}]}]}